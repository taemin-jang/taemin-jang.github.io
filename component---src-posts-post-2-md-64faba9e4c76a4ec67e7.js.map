{"version":3,"file":"component---src-posts-post-2-md-64faba9e4c76a4ec67e7.js","mappings":"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","sources":["webpack://taemin-jang.github.io/./src/posts/post2.md","webpack://taemin-jang.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"콜백 함수?\"), \"\\n\", React.createElement(_components.p, null, \"콜백 함수란 다른 함수의 인자로 함수를 넘겨주고, 해당 함수 내에서 전달 받은 함수를 실행하는 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"주로 매개변수에 함수를 전달해 일회용으로 사용하기 때문에 함수의 이름을 명시하지 않는 익명 함수로 사용한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"let button = document.getElementById(\\\"button\\\"); // 버튼 요소를 선택\\r\\n\\r\\n// 버튼에 클릭 이벤트 리스너를 추가\\r\\nbutton.addEventListener(\\\"click\\\", function () {\\r\\n  // 콜백 함수\\r\\n  console.log(\\\"Button clicked!\\\");\\r\\n});\\r\\n\\r\\n// ------------------------------------\\r\\n\\r\\nsetTimeout(() => {\\r\\n  console.log(\\\"Delayed for 1 second.\\\");\\r\\n}, 1000);\\r\\n\\r\\n// ------------------------------------\\r\\nfunction callback() {\\r\\n  console.log(\\\"hi\\\");\\r\\n}\\r\\n\\r\\nfunction print(callback) {\\r\\n  callback();\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"콜백 함수 주의점\"), \"\\n\", React.createElement(_components.h3, null, \"1. this를 사용한 콜백함수\"), \"\\n\", React.createElement(_components.p, null, \"콜백 함수 내에서 \", React.createElement(_components.code, null, \"this\"), \"를 사용하면 예상한대로 동작하지 않을 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"let userData = {\\r\\n  signUp: \\\"2021-4-06 12:00:00\\\",\\r\\n  name: \\\"Not Set\\\",\\r\\n  setName: function (firstName, lastName) {\\r\\n    this.name = firstName + \\\" \\\" + lastName;\\r\\n  },\\r\\n};\\r\\n\\r\\nfunction getUserName(firstName, lastName, callback) {\\r\\n  callback(firstName, lastName);\\r\\n}\\r\\n\\r\\ngetUserName(\\\"홍\\\", \\\"길동\\\", userData.setName);\\r\\n\\r\\nconsole.log(\\\"1: \\\", userData.name); // Not Set\\r\\nconsole.log(\\\"2: \\\", window.name); // 홍 길동\\n\")), \"\\n\", React.createElement(_components.p, null, \"callback 함수의 this는 호출한 함수의 this를 따르게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서 usetData.setName을 호출한 getUserName의 this를 따르게 되고 해당 함수는 전역에서 호출했기 때문에 this는 window를 가리키게 된다.\"), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, \"예\"), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// 해당 콜백함수는 userData.setName과 아무런 관계가 없는 함수 형태만 비슷한 독립적인 함수이다.\\r\\ngetUserName(\\\"홍\\\", \\\"길동\\\", function (firstName, lastName) {\\r\\n  this.name = firstName + \\\" \\\" + lastName;\\r\\n});\\n\"))), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"let userData = {\\r\\n  signUp: \\\"2021-4-06 12:00:00\\\",\\r\\n  name: \\\"Not Set\\\",\\r\\n  setName: function (firstName, lastName) {\\r\\n    this.name = firstName + \\\" \\\" + lastName;\\r\\n  },\\r\\n};\\r\\n\\r\\nuserData.setName(\\\"홍\\\", \\\"길동\\\");\\r\\n\\r\\nconsole.log(userData.name); // 홍 길동\\n\")), \"\\n\", React.createElement(_components.p, null, \"이 경우에는 setName 메소드를 userData라는 객체에서 호출했기 때문에 this는 userData를 가리키게 된다.\"), \"\\n\", React.createElement(_components.h3, null, \"2. 콜백 지옥(Callback Hell)\"), \"\\n\", React.createElement(_components.p, null, \"비동기 호출이 자주 일어날 때 콜백 지옥이 발생한다.\"), \"\\n\", React.createElement(_components.p, null, \"콜백 함수 호출이 중첩되어 복잡도가 높아지는 현상이다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/callback_hell.png\",\n    alt: \"Callback Hell\"\n  }), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"function add(x, callback) {\\r\\n  let sum = x + x;\\r\\n  console.log(sum);\\r\\n  callback(sum);\\r\\n}\\r\\n\\r\\nadd(2, function (result) {\\r\\n  add(result, function (result) {\\r\\n    add(result, function (result) {\\r\\n      console.log(\\\"finish!!\\\");\\r\\n    });\\r\\n  });\\r\\n});\\r\\n\\r\\n// <output>\\r\\n// 4\\r\\n// 8\\r\\n// 16\\r\\n// finish!!\\n\")), \"\\n\", React.createElement(_components.h2, null, \"this 해결 방법\"), \"\\n\", React.createElement(_components.p, null, \"콜백 함수의 this를 보호할 수 있도록 만들어줘야 한다.\"), \"\\n\", React.createElement(_components.h3, null, \"1. call(), apply() 메서드 사용\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"call()\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"// call 메서드 사용\\r\\nlet userData = {\\r\\n  signUp: \\\"2021-4-06 12:00:00\\\",\\r\\n  name: \\\"Not Set\\\",\\r\\n  setName: function (firstName, lastName) {\\r\\n    this.name = firstName + \\\" \\\" + lastName;\\r\\n  },\\r\\n};\\r\\n\\r\\nfunction getUserName(firstName, lastName, callback, data) {\\r\\n  // userData를 받는 매개변수 data를 추가\\r\\n  callback.call(data, firstName, lastName); // data를 this로 사용\\r\\n}\\r\\n\\r\\ngetUserName(\\\"홍\\\", \\\"길동\\\", userData.setName, userData); // userData를 인수로 전달\\r\\n\\r\\nconsole.log(\\\"1: \\\", userData.name); // 홍 길동\\r\\nconsole.log(\\\"2: \\\", window.name); // Not Set\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"apply()\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"// apply 메서드 사용\\r\\nlet userData = {\\r\\n  signUp: \\\"2021-4-06 12:00:00\\\",\\r\\n  name: \\\"Not Set\\\",\\r\\n  setName: function (firstName, lastName) {\\r\\n    this.name = firstName + \\\" \\\" + lastName;\\r\\n  },\\r\\n};\\r\\n\\r\\nfunction getUserName(firstName, lastName, callback, data) {\\r\\n  // userData를 받는 매개변수 data를 추가\\r\\n  callback.apply(data, [firstName, lastName]); // data를 this로 사용하고 배열을 전달\\r\\n}\\r\\n\\r\\ngetUserName(\\\"홍\\\", \\\"길동\\\", userData.setName, userData); // userData를 인수로 전달\\r\\n\\r\\nconsole.log(\\\"1: \\\", userData.name); // 홍 길동\\r\\nconsole.log(\\\"2: \\\", window.name); // Not Set\\n\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"화살표 함수도 해결방안이 될 수 있지만 현재 예시에서는 객체 메소드로 화살표 함수가 사용되기 때문에 똑같이 전역을 가리킨다.\"), \"\\n\", React.createElement(_components.h3, null, \"2. Promise 사용\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"function add(x) {\\r\\n  return new Promise((resolve, reject) => {\\r\\n    let sum = x + x;\\r\\n    console.log(sum);\\r\\n    resolve(sum);\\r\\n  });\\r\\n}\\r\\n\\r\\nadd(2).then((result) => {\\r\\n  add(result).then((result) => {\\r\\n    add(result).then((result) => {\\r\\n      console.log(\\\"finish!!\\\");\\r\\n    });\\r\\n  });\\r\\n});\\r\\n\\r\\n// <output>\\r\\n// 4\\r\\n// 8\\r\\n// 16\\r\\n// finish!!\\n\")), \"\\n\", React.createElement(_components.p, null, \"하지만 promise도 결국 콜백지옥처럼 들여쓰기로 인해 이해하기 쉽지 않다. ⇒ Promise Hell\"), \"\\n\", React.createElement(_components.p, null, \"return을 사용하면 Promise Hell을 탈출 할 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"function add(x) {\\r\\n  return new Promise((resolve, reject) => {\\r\\n    let sum = x + x;\\r\\n    console.log(sum);\\r\\n    resolve(sum);\\r\\n  });\\r\\n}\\r\\n\\r\\nadd(2)\\r\\n  .then((result) => {\\r\\n    return add(result);\\r\\n  })\\r\\n  .then((result) => {\\r\\n    return add(result);\\r\\n  })\\r\\n  .then((result) => {\\r\\n    console.log(\\\"finish!!\\\");\\r\\n  });\\r\\n\\r\\n// <output>\\r\\n// 4\\r\\n// 8\\r\\n// 16\\r\\n// finish!!\\n\")), \"\\n\", React.createElement(_components.h1, null, \"Promise란?\"), \"\\n\", React.createElement(_components.p, null, \"프로미스는 자바스크립트 비동기 처리에 사용되는 객체이다.\"), \"\\n\", React.createElement(_components.h2, null, \"Promise States\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/promise_state.png\",\n    alt: \"Promise State\"\n  }), \"\\n\", React.createElement(_components.h3, null, \"1. Pending (대기)\"), \"\\n\", React.createElement(_components.p, null, \"비동기 처리 로직이 아직 완료되지 않은 상태를 의미한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"new Promise();\\n\")), \"\\n\", React.createElement(_components.h3, null, \"2. Fulfilled (완료)\"), \"\\n\", React.createElement(_components.p, null, \"비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태를 의미한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"new Promise(function (resolve, reject) {\\r\\n  resolve();\\r\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"그리고 이행 상태가 되면 \", React.createElement(_components.code, null, \"then()\"), \"을 사용하여 처리 결과 값을 받을 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"function getData() {\\r\\n  return new Promise(function (resolve, reject) {\\r\\n    var data = 100;\\r\\n    resolve(data);\\r\\n  });\\r\\n}\\r\\n\\r\\n// resolve()의 결과 값 data를 resolvedData로 받음\\r\\ngetData().then(function (resolvedData) {\\r\\n  console.log(resolvedData); // 100\\r\\n});\\n\")), \"\\n\", React.createElement(_components.h3, null, \"3. Rejected (실패)\"), \"\\n\", React.createElement(_components.p, null, \"비동기 처리가 실패하거나 오류가 발생한 상태를 의미한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"new Promise(function (resolve, reject) {\\r\\n  reject();\\r\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"실패 상태가 되면 실패의 처리 결과 값을 \", React.createElement(_components.code, null, \"catch()\"), \"로 받을 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"function getData() {\\r\\n  return new Promise(function (resolve, reject) {\\r\\n    reject(new Error(\\\"Request is failed\\\"));\\r\\n  });\\r\\n}\\r\\n\\r\\n// reject()의 결과 값 Error를 err에 받음\\r\\ngetData()\\r\\n  .then()\\r\\n  .catch(function (err) {\\r\\n    console.log(err); // Error: Request is failed\\r\\n  });\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Promise flow\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/promise_flow.png\",\n    alt: \"Promise Flow\"\n  }), \"\\n\", React.createElement(_components.h2, null, \"Promise Chaining\"), \"\\n\", React.createElement(_components.p, null, \"여러 개의 프로미스를 \", React.createElement(_components.code, null, \"then, catch, finally\"), \"로 연결하여 사용할 수 있다.\"), \"\\n\", React.createElement(_components.h3, null, \"then\"), \"\\n\", React.createElement(_components.p, null, \"프로미스 객체를 반환 받고 해당 결과를 받거나 에러를 받을 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"promise.then(\\r\\n  function (result) {\\r\\n    /* 결과(result)를 다룹니다 */\\r\\n  },\\r\\n  function (error) {\\r\\n    /* 에러(error)를 다룹니다 */\\r\\n  }\\r\\n);\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"then의 첫 번째 인수는 프로미스가 resolve 되었을 때 실행되는 함수로 실행 결과 값을 받아 처리\"), \"\\n\", React.createElement(_components.li, null, \"then의 두 번째 인수는 프로미스가 reject 되었을 때 실행되는 함수로 에러 값을 받아 처리\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"하지만 주로 성공적(resolve)으로 처리 된 경우만 다루기 때문에 인수를 하나만 전달한다.\"), \"\\n\", React.createElement(_components.h3, null, \"catch\"), \"\\n\", React.createElement(_components.p, null, \"에러가 발생한 경우, 즉 reject된 경우만 다루는 함수로 에러 처리할 때 사용한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \".then(undefined, errorHandling)\"), \" then에서 첫 번째 인자를 null로 전달하면 동일하게 작동한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"promise.catch(function (error) {\\r\\n  /* 에러(error)를 다룹니다 */\\r\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"then으로 두 개의 인자를 받아서 처리하는 것보다 각각 하나의 역할로 처리하는 것이 코드 가독성에도 좋다.\"), \"\\n\", React.createElement(_components.h3, null, \"finally\"), \"\\n\", React.createElement(_components.p, null, \"try - catch문에 finally 절이 있는 것과 같이, 프로미스에도 존재하며 resolve, reject 상관 없이 무조건 한번만 실행된다.\"), \"\\n\", React.createElement(_components.p, null, \"주로 then, catch에 상관 없이 동일한 처리를 할 경우 사용된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"new Promise((resolve, reject) => {\\r\\n  setTimeout(() => resolve(\\\"결과\\\"), 2000)\\r\\n})\\r\\n  .finally(() => alert(\\\"프라미스가 준비되었습니다.\\\"))\\r\\n  .then(result => alert(result));\\r\\n\\t.catch(err => alert(err));\\n\")), \"\\n\", React.createElement(_components.h1, null, \"Async/Await\"), \"\\n\", React.createElement(_components.p, null, \"ES8(ECMAScript 2017)에서 간단하고 가독성 좋게 비동기 처리를 동기 처리처럼 동작하도록 구현하기 위해 도입되었다.\"), \"\\n\", React.createElement(_components.p, null, \"async/await은 프로미스를 기반으로 동작하며, 프로미스의 후속 메서드인 then/catch/finally를 사용하지 않고 동기 처리처럼 사용할 수 있다.\"), \"\\n\", React.createElement(_components.h2, null, \"async 함수\"), \"\\n\", React.createElement(_components.p, null, \"await 키워드는 반드시 async 함수 내부에서 사용해야 한다. async 함수는 async 키워드를 사용해서 정의하며 resolve하는 프로미스 객체를 반환한다.\"), \"\\n\", React.createElement(_components.h2, null, \"await 키워드\"), \"\\n\", React.createElement(_components.p, null, \"프로미스가 settled 상태가 될 때까지 대기하다가 settled 상태가 되면 프로미스가 resolve한 처리 결과를 반환한다. await 키워드는 반드시 프로미스 앞에서 사용해야 한다!\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"const fetch = require(\\\"node-fetch\\\");\\r\\n\\r\\nconst getGithubUserName = async (id) => {\\r\\n  const res = await fetch(`https://api.github.com/users/${id}`);\\r\\n  const { name } = await res.json();\\r\\n  console.log(name); // taemin-jang\\r\\n};\\r\\n\\r\\ngetGithubUserName(\\\"taemin-jang\\\");\\n\")), \"\\n\", React.createElement(_components.h2, null, \"에러 처리\"), \"\\n\", React.createElement(_components.p, null, \"이전 비동기 함수들은 try-catch문을 사용할 수 없었다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서 프로미스 객체로 반환되면 후속 메서드인 catch로 에러 처리를 할 수 있었는데 async/await은 try-catch문을 사용할 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"const fetch = require(\\\"node-fetch\\\");\\r\\n\\r\\nconst getGithubUserName = async (id) => {\\r\\n  try {\\r\\n    const res = await fetch(`https://api.github.com/users/${id}`);\\r\\n    const { name } = await res.json();\\r\\n    console.log(name); // taemin-jang\\r\\n  } catch (err) {\\r\\n    console.log(err);\\r\\n  }\\r\\n};\\r\\n\\r\\ngetGithubUserName(\\\"taemin-jang\\\");\\n\")), \"\\n\", React.createElement(_components.p, null, \"따라서 async/await은 비동기 처리의 처리 순서가 보장되어야 하는 모든 프로미스에 사용하면 동기 처리처럼 동작시킬 수 있다.\"), \"\\n\", React.createElement(_components.h3, null, \"마무리\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"setTimeout(() => console.log(1), 0);\\r\\n\\r\\nPromise.resolve()\\r\\n  .then(() => console.log(2))\\r\\n  .then(() => console.log(3));\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","pre","code","h2","h3","img","ul","li","_provideComponents","components","React","className","src","alt","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}