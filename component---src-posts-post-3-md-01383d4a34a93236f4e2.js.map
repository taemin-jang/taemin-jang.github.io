{"version":3,"file":"component---src-posts-post-3-md-01383d4a34a93236f4e2.js","mappings":"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","sources":["webpack://taemin-jang.github.io/./src/posts/post3.md","webpack://taemin-jang.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    img: \"img\",\n    h3: \"h3\",\n    ul: \"ul\",\n    blockquote: \"blockquote\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"HTTP Cache\"), \"\\n\", React.createElement(_components.p, null, \"자주 쓰이는 리소스를 나중에 사용하기 위해 사본으로 저장하고, 나중에 동일한 요청을 했을 때, 캐시된 사본이 존재한다면 서버로 요청을 보내는 것이 아닌 Cache로부터 제공 된다. (⇒ 캐싱)\"), \"\\n\", React.createElement(_components.h2, null, \"Cache는 왜 사용하는 것일까?\"), \"\\n\", React.createElement(_components.p, null, \"네트워크에 대해 이해하고 있어야한다.\"), \"\\n\", React.createElement(_components.p, null, \"네트워크를 통해서 리소스를 가져오는 것은 느리고 비용이 많이 든다.\"), \"\\n\", React.createElement(_components.p, null, \"클라이언트가 자주 쓰는 페이지가 존재한다면 해당 페이지에 접속할 때마다 항상 서버로부터 요청을 보내고 서버는 같은 리소스를 클라이언트에게 매 번 보내야한다.\"), \"\\n\", React.createElement(_components.p, null, \"그러면 클라이언트는 매 번 해당 페이지를 이용할 때마다 UX적으로 느린 경험을 할 수 밖에 없다.\"), \"\\n\", React.createElement(_components.p, null, \"또한 서버도 비용이 많이드는 리소스를 매 번 전달해야하므로 서버측에서도 부담이 많이 된다.\"), \"\\n\", React.createElement(_components.p, null, \"이러한 문제점을 해결하기 위해 캐시를 사용하는 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"캐시를 이용하면 서버와 클라이언트 둘 다 이점을 볼 수 있다. 대부분 trade-off가 적용되는데 캐시는 trade-off가 적용되지 않는다.\"), \"\\n\", React.createElement(_components.h2, null, \"Cache가 주는 이점들\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"불필요한 데이터 전송을 줄여 네트워크 비용 감소\"), \"\\n\", React.createElement(_components.li, null, \"네트워크 병목현상과 거리로 인한 지연시간을 줄여 웹 페이지를 빠르게 불러옴으로써 UX 증가\"), \"\\n\", React.createElement(_components.li, null, \"서버에 대한 요청을 줄여 서버의 부하 감소\"), \"\\n\", React.createElement(_components.li, null, \"갑작스런 요청 쇄도에 대처 가능\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"HTTP Cache 종류\"), \"\\n\", React.createElement(_components.p, null, \"클라이언트에서 HTTP 요청을 보내면, 해당 요청을 바로 서버로 전송하지 않고 캐시된 데이터가 존재하는지 확인한다.\"), \"\\n\", React.createElement(_components.p, null, \"캐시는 차례대로 서비스 워커 캐시 → 브라우저 캐시 → 프록시 캐시 (CDN) 순으로 확인 후 유효한 응답 값이 없을 경우 서버에 요청을 보내고 응답을 받게 된다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/http_cache_flow.png\",\n    alt: \"Http Cache Flow\"\n  }), \"\\n\", React.createElement(_components.h2, null, \"Worker?\"), \"\\n\", React.createElement(_components.h3, null, \"Web worker\"), \"\\n\", React.createElement(_components.p, null, \"JavaScript를 백그라운드에서 실행할 수 있는 쓰레드를 생성하는 기술\"), \"\\n\", React.createElement(_components.p, null, \"웹 워커는 UI 쓰레드와 별개로 존재하므로 DOM에 접근할 수 없지만 자체적인 Global scope에서 Window scope와 같은 기능을 제공하기 때문에 지원 가능하다.\"), \"\\n\", React.createElement(_components.h3, null, \"Shared worker\"), \"\\n\", React.createElement(_components.p, null, \"윈도우 창이나 Iframe, worker등의 다른 브라우징 컨텍스트에서도 접근이 가능하다.\"), \"\\n\", React.createElement(_components.p, null, \"특정 사이트에 로그인 후 중간에 어떤 탭에서 로그아웃 하면 Shared worker에서 자신을 참조하고 있는 모든 브라우저 컨텍스트에 메시지를 보내 다른 탭에 잇는 로그인 된 사이트도 로그아웃 시킨다.\"), \"\\n\", React.createElement(_components.p, null, \"(이 경우가 두 개의 탭을 동일한 사이트에서 로그인 했을 때 한 쪽에서 로그아웃 하면 다른 탭도 로그아웃 되는 현상)\"), \"\\n\", React.createElement(_components.h3, null, \"Service worker\"), \"\\n\", React.createElement(_components.p, null, \"다른 문서나 소스로부터 발생되는 이벤트에 대응하기 위한 이벤트 Driven 방식이며 이벤트 기반 워커로서 JavaScript 파일의 형태를 갖고 있다.\"), \"\\n\", React.createElement(_components.p, null, \"네트워크 요청을 가로채서 네트워크 사용 가능 여부에 따라 적절한 행동을 취하고, 서버 리소스를 업데이트 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"지속적인 백그라운드 프로세싱을 위해 새 런타임을 생성하는 것이 아니라 설치하는 방식이다.\"), \"\\n\", React.createElement(_components.p, null, \"웹 페이지와 별개로 존재하므로 DOM이나 Window 요소에 접근 불가하며 비동기적으로 설계되어 XHR이나 웹 저장소 등의 API를 서비스 워커 내에서 사용할 수 없다.\"), \"\\n\", React.createElement(_components.p, null, \"비동기로 설계되어 서비스 워커는 JavaScript 서비스와 다른 스레드에서 동작하므로 블로킹하지 않는다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Service worker의 역할 및 기능\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"네트워크 프록시 역할\"), \"\\n\", React.createElement(_components.li, null, \"오프라인 웹을 구현하기 위해 캐시 활용 가능\"), \"\\n\", React.createElement(_components.li, null, \"브라우저 창이 닫힌 상태(백그라운드)에서도 동작하므로 푸시 알림 구현 가능\"), \"\\n\", React.createElement(_components.li, null, \"채팅 혹은 사진 업로드 기능 사용 중 컴퓨터가 오프라인 상태가 되는 경우 인터넷이 다시 연결됐을 때 메시지 전송을 실패하지 않는 백그라운드 동기화 가능\"), \"\\n\", React.createElement(_components.li, null, \"리소스를 세부적으로 캐싱 가능\"), \"\\n\", React.createElement(_components.li, null, \"보안 상의 이유로 HTTPS 통신이 가능한 서버에서만 동작 가능 (Localhost 제외)\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"네트워크 요청을 수정할 수 있어 중간자 공격(Man In The Middle : MITM)에 취약\", \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"중간자 공격(Man In The Middle : MITM) :\\r\\n공격자가 사용자의 인터넷 서버와 해당 인터넷 트래픽의 목적지 사이에 끼어들어 데이터 전송을 가로채는 공격이다. 꼭 사용자와 인터넷 서버간이 아니더라도 사용자와 사용자 간에서도 데이터를 가로챌 수 있다.\\r\\n자세한 내용 참고\\r\\nhttps://nordvpn.com/ko/blog/mitm/\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Life Cycle\\r\\nRegistration → Install → Activate → Idle → Fetch\"), \"\\n\", React.createElement(_components.li, null, \"Service worker state\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Installing\"), \"\\n\", React.createElement(_components.li, null, \"Installed\"), \"\\n\", React.createElement(_components.li, null, \"Activating\"), \"\\n\", React.createElement(_components.li, null, \"Activated\"), \"\\n\", React.createElement(_components.li, null, \"Redundant\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"서비스 워커 캐시\"), \"\\n\", React.createElement(_components.p, null, \"서비스 워커에서 fetch 이벤트 핸들러를 만들고 네트워크 요청을 가로채서 네트워크가 아닌 서비스 워커의 캐시에서 확인하고 반환한다.\"), \"\\n\", React.createElement(_components.h2, null, \"캐싱 레이어\"), \"\\n\", React.createElement(_components.h3, null, \"서비스 워커 캐싱\"), \"\\n\", React.createElement(_components.p, null, \"서비스 워커는 네트워크 유형의 HTTP 요청을 가로채고 캐싱 전략을 사용하여 브라우저에 반환되어야 하는 리소스를 결정한다.\"), \"\\n\", React.createElement(_components.p, null, \"서비스 워커 캐시와 HTTP 캐시는 일반 용도로 사용되지만 서비스 워커 캐시가 정확히 무엇을 캐시하고 어떻게 캐싱하는지에 대해 알아보자\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_flow.png\",\n    alt: \"Service Worker Flow\"\n  }), \"\\n\", React.createElement(_components.p, null, \"서비스 워커는 이벤트 리스너(일반적으로 fetch 이벤트)로 HTTP 요청을 가로채게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"이미지를 보면 \", React.createElement(_components.a, {\n    href: \"https://developer.chrome.com/docs/workbox/modules/workbox-strategies/#cache-first-cache-falling-back-to-network\"\n  }, \"Cache-FIrst 캐싱 전략\"), \"으로 캐시 데이터를 먼저 확인하여 불필요한 HTTP 요청을 줄여준다.\"), \"\\n\", React.createElement(_components.p, null, \"서비스 워커의 사용법 (Life Cycle)\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_lifecycle.png\",\n    alt: \"Service Worker Life Cycle\"\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Registration (등록)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"index.html 파일 script 태그 안에 \", React.createElement(_components.code, null, \"navigator.serviceWorker.register()\"), \"메서드를 사용해 서비스 워커를 등록한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<!DOCTYPE html>\\r\\n<html lang=\\\"en\\\">\\r\\n  <head>\\r\\n    <meta charset=\\\"UTF-8\\\" />\\r\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\r\\n    <title>mySite</title>\\r\\n  </head>\\r\\n  <body>\\r\\n    <h1>Test</h1>\\r\\n    <script>\\r\\n      const registerServiceWorker = async () => {\\r\\n        // 브라우저에서 서비스 워커를 지원하는지 체크\\r\\n        if (\\\"serviceWorker\\\" in navigator) {\\r\\n          try {\\r\\n            console.log(\\\"서비스 워커 지원\\\");\\r\\n\\r\\n            // 등록된 서비스 워커 지우기\\r\\n            navigator.serviceWorker.getRegistrations().then((r) => {\\r\\n              r[0].unregister();\\r\\n            });\\r\\n\\r\\n            // 현재 등록된 서비스 워커 확인\\r\\n            navigator.serviceWorker\\r\\n              .getRegistrations()\\r\\n              .then((res) => console.log(\\\"등록된 서비스 워커\\\", res));\\r\\n\\r\\n            // 서비스 워커 등록\\r\\n            const registration = await navigator.serviceWorker.register(\\r\\n              \\\"./service-worker.js\\\"\\r\\n            );\\r\\n            console.log(registration);\\r\\n            if (registration.installing) {\\r\\n              console.log(\\\"Service worker installing\\\");\\r\\n            } else if (registration.waiting) {\\r\\n              console.log(\\\"Service worker installed\\\");\\r\\n            } else if (registration.active) {\\r\\n              console.log(\\\"Service worker active\\\");\\r\\n            }\\r\\n          } catch (error) {\\r\\n            console.error(`Registration failed with ${error}`);\\r\\n          }\\r\\n        }\\r\\n      };\\r\\n\\r\\n      registerServiceWorker();\\r\\n    </script>\\r\\n  </body>\\r\\n</html>\\n\")), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Install (설치)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"사이트 첫 방문 시 Install 이벤트 발생 후 페이지 캐싱\"), \"\\n\", React.createElement(_components.li, null, \"Install 리스너에서 캐시 초기화 후 오프라인 사용을 위해 파일들 추가\"), \"\\n\", React.createElement(_components.li, null, \"캐시 이름을 저장할 변수를 생성하고, 파일들을 하나의 배열에 저장\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// service_worker.js\\r\\n\\r\\n// 서비스 워커 설치\\r\\nself.addEventListener(\\\"install\\\", (pEvent) => {\\r\\n  console.log(\\\"(install)서비스워커 설치 중\\\");\\r\\n\\r\\n  // 설치 완료되면 waitUntil 실행\\r\\n  pEvent.waitUntil(\\r\\n    // 캐시 변수 cacheName1 생성 후 cache.addALL() 메서드로 파일들을 하나의 배열로 저\\r\\n    caches\\r\\n      .open(\\\"cacheName1\\\")\\r\\n      .then((cache) => cache.addAll([\\\"/test.png\\\", \\\"/test.ico\\\"]))\\r\\n  );\\r\\n});\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Activate (활성화)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"기존 서비스 워커가 없으면 설치를 시도하고, 설치를 성공하면 활성화한다.\"), \"\\n\", React.createElement(_components.li, null, \"만약 기존에 서비스 워커가 존재한 경우, 새로운 버전을 백그라운드에서 설치하지만 아직 활성화는 하지 않는다. 이 시점의 워커를 \", React.createElement(_components.code, null, \"대기 중인 워커\"), \"라고 부르며, 대기 중인 워커는 이전 버전의 서비스 워커를 사용하는 페이지가 모두 닫힌 후에 활성화가 되고 이를 \", React.createElement(_components.code, null, \"활성 워커\"), \"라고 한다.\"), \"\\n\", React.createElement(_components.li, null, \"활성화 절차를 더 빨리 하려면 \", React.createElement(_components.code, null, \"ServiceWorkerGlobalScope.skipWaiting()\"), \"을 사용할 수 있고, 새로운 활성 워커는 \", React.createElement(_components.code, null, \"Clients.claim()\"), \"을 사용해 이전 페이지를 회수할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"active 했을 때 과거의 캐시를 지우는 등 이전 서비스 워커 관련된 항목을 정리하면 좋다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// service-worker.js\\r\\n\\r\\n// 서비스 워커 활성화\\r\\nself.addEventListener(\\\"activate\\\", (event) => {\\r\\n  // 캐시 허용 리스트\\r\\n  const cacheAllowlist = [\\\"v2\\\"];\\r\\n\\r\\n  // 활성화 되면 waitUntil 실행\\r\\n  event.waitUntil(\\r\\n    caches.keys().then((keyList) => {\\r\\n      Promise.all(\\r\\n        keyList.map((key) => {\\r\\n          // 이전에 생성한 캐시가 허용되지 않았다면\\r\\n          if (!cacheAllowlist.includes(key)) {\\r\\n            // 해당 캐시를 지웁니다.\\r\\n            return caches.delete(key);\\r\\n          }\\r\\n        })\\r\\n      );\\r\\n    })\\r\\n  );\\r\\n});\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Fetch\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"서비스 워커 설치 후 fetch 요청을 감지 후 처리\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// service-worker.js\\r\\n\\r\\n// 요청이 올 때마다 가로채기\\r\\nself.addEventListener(\\\"fetch\\\", (event) => {\\r\\n  console.log(\\\"fetch\\\");\\r\\n  event.respondWith(\\r\\n    caches.match(event.request).then((response) => {\\r\\n      // request에 캐시가 있다면 반환\\r\\n      if (response) {\\r\\n        console.log(\\\"Found response in cache:\\\", response);\\r\\n\\r\\n        return response;\\r\\n      }\\r\\n      console.log(\\\"No response found in cache. About to fetch from network…\\\");\\r\\n\\r\\n      // 없으면 네트워크 fetch로 요청\\r\\n      return fetch(event.request)\\r\\n        .then((response) => {\\r\\n          console.log(\\\"Response from network is:\\\", response);\\r\\n\\r\\n          return response;\\r\\n        })\\r\\n        .catch((error) => {\\r\\n          console.error(\\\"Fetching failed:\\\", error);\\r\\n\\r\\n          throw error;\\r\\n        });\\r\\n    })\\r\\n  );\\r\\n});\\n\")), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, \"카카오 tech 블로그에서 사용한 예시\"), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<!--index.html-->\\r\\n<script>\\r\\n\\t\\t\\t// ...\\r\\n\\t\\t\\t// 서비스 워커 등록 후 fetch 요청\\r\\n\\t\\t\\tregisterServiceWorker();\\r\\n      fetch(\\\"https://jsonplaceholder.typicode.com/users/1\\\")\\r\\n        .then((response) => response.json())\\r\\n        .then((data) => console.log(data))\\r\\n        .catch((error) => console.log(error));\\r\\n</script>\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-jsx\"\n  }, \"self.addEventListener(\\\"fetch\\\", function (event) {\\r\\n  const { method, headers, url } = event.request;\\r\\n  console.log(\\\"[SW] Fetch Method : \\\", method);\\r\\n  console.log(\\\"[SW] Fetch Headers : \\\", headers);\\r\\n  console.log(\\\"[SW] Fetch URL : \\\", url);\\r\\n});\\n\"))), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"실제 실행해보기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"캐시 확인\"), \"\\n\", React.createElement(_components.p, null, \"캐시 저장공간에 2개의 캐시를 생성했다. cache-v1과 cacheName이 있는데 activate 됐을 때 허용된 캐시만 남기고 허용되지 않은 캐시는 삭제되는지 테스트 해봤다. (허용되지 않은 캐시는 cacheName)\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_1.png\",\n    alt: \"Service Worker 1\"\n  }), \"\\n\", React.createElement(_components.p, null, \"성공적으로 허용되지 않은 캐시는 사라지는 것을 볼 수 있다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_2.png\",\n    alt: \"Service Worker 2\"\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"캐시가 저장되고 삭제되는 것을 봤으니 오프라인 모드에서 동작하는지 확인해봐야죠\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_execution.gif\",\n    alt: \"Service Worker Execution\"\n  }), \"\\n\", React.createElement(_components.p, null, \"네트워크 환경을 오프라인으로 변경 후 새로고침 하면 인터넷 연결 없음이 뜨지만\"), \"\\n\", React.createElement(_components.p, null, \"이 후에 서비스 워커가 설치 및 서비스 워커가 실행되면서 캐시에 저장되어 있는 파일을 가져오게 되고 정상적으로 동작하는 것을 볼 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"외부 url fetch로 호출 시 3초가 걸리도록 설정했다.\\r\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_fetch_code.png\",\n    alt: \"Service Worker Fetch code\"\n  }), \"\\r\\n캐시 비우기 및 강력 새로고침하면 아래 사진처럼 3초 뒤에 fetch 데이터를 호출한다.\\r\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_prev_caching.png\",\n    alt: \"Service Worker Prev Caching\"\n  }), \"\\r\\n새로고침하면 캐시되어있는 데이터를 바로 가져오는 것을 볼 수 있다.\\r\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_after_caching.png\",\n    alt: \"Service Worker After Caching\"\n  })), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"동작 시나리오 정리\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"사용자가 처음 웹 서비스에 들어오면 서비스 워커가 설치됨.\"), \"\\n\", React.createElement(_components.li, null, \"서비스 워커는 Cache Storage API를 이용해 정적 파일을 캐시에 저장.\"), \"\\n\", React.createElement(_components.li, null, \"서비스 워커 설치 후 실행되면서 허용되지 않은 캐시가 있을 경우 삭제.\"), \"\\n\", React.createElement(_components.li, null, \"이후 사용자가 요청을 보내면 서비스 워커에 의해 캐시 반환.\\r\\n⇒ 오프라인 환경에서도 서비스 워커 캐시를 반환하므로 정상 작동.\"), \"\\n\", React.createElement(_components.li, null, \"만약 캐시에 해당 요청에 대한 반환 값이 없다면 HTTP 요청으로 전송\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"주의사항\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"service worker는 https와 \", React.createElement(_components.a, {\n    href: \"http://localhost\"\n  }, \"localhost\"), \" 환경에서 동작 (본인은 express 환경에서 동작시킴)\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_caution_1.png\",\n    alt: \"Service Worker Caution 1\"\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"개발자도구 > 애플리케이션 > 좌측 탭에 Service Workers > 새로고침 시 업데이트 체크\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_caution_2.png\",\n    alt: \"Service Worker Caution 2\"\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"express 환경에서 진행할 경우 http://localhost:7777/service-worker.js ~~~관련 에러가 뜰 경우 정적 파일을 찾지 못하는 것이기 때문에 express에서 아래 사진과 같이 설정해줘야 함\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_caution_3.png\",\n    alt: \"Service Worker Caution 3\"\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"만약 아래와 같이 cache.addAll에 대한 에러가 발생했다 캐시하는 목록들 중에서 404 error가 발생했기 때문이다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_caution_4.png\",\n    alt: \"Service Worker Caution 4\"\n  }), \"\\n\", React.createElement(_components.p, null, \"네트워크 탭을 열어보면 취소된 내용 말고, index.html 404 Error가 보인다.\\r\\n해당 index.html을 가져오지 못하는 것이므로 경로 수정을 해주면 해결된다.\"), \"\\n\", React.createElement(_components.p, null, \"index.html은 / 경로로 수정하면 해결된다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_caution_5.png\",\n    alt: \"Service Worker Caution 5\"\n  }), \"\\n\", React.createElement(_components.p, null, \"수정한 결과는 다음과 같이 캐시 저장공간에 캐시할 파일들이 추가된 것을 확인할 수 있다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_caution_6.png\",\n    alt: \"Service Worker Caution 6\"\n  }), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/service_worker_caution_7.png\",\n    alt: \"Service Worker Caution 7\"\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"대부분의 블로그나 service worker를 다루는 사이트에서 fetch 요청을 캐시할 때 다음과 같은 코드를 사용한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"self.addEventListener(\\\"fetch\\\", (event) => {\\r\\n  event.respondWith(\\r\\n    fetch(event.request).catch(() => {\\r\\n      return caches\\r\\n        .open(cacheName)\\r\\n        .then((cache) => cache.match(event.request));\\r\\n    })\\r\\n  );\\r\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"코드를 보면 잘 동작될 것 같은 코드지만, 내 환경에서는 동작하지 않았다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"fetch(…).catch\"), \" 에 대한 에러가 발생했다.\"), \"\\n\", React.createElement(_components.p, null, \"내가 생각한 이유는 fetch는 HTTP 통신 방법인데 나는 오프라인 환경에서 동작을 시켜야 했기 때문에 안됐던 것 같다.\"), \"\\n\", React.createElement(_components.p, null, \"그래서 나는 \", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request\"\n  }, \"MDN에서 제공하는 FetchEvent request 예제\"), \"를 사용했다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// 요청이 올 때마다 가로채기\\r\\nself.addEventListener(\\\"fetch\\\", (event) => {\\r\\n  console.log(\\\"fetch\\\");\\r\\n  event.respondWith(\\r\\n    caches.match(event.request).then((response) => {\\r\\n      if (response) {\\r\\n        console.log(\\\"Found response in cache:\\\", response);\\r\\n\\r\\n        return response;\\r\\n      }\\r\\n      console.log(\\r\\n        \\\"No response found in cache. About to fetch from network…\\\"\\r\\n      );\\r\\n\\r\\n      return fetch(event.request)\\r\\n        .then((response) => {\\r\\n          console.log(\\\"Response from network is:\\\", response);\\r\\n\\r\\n          return response;\\r\\n        })\\r\\n        .catch((error) => {\\r\\n          console.error(\\\"Fetching failed:\\\", error);\\r\\n\\r\\n          throw error;\\r\\n        });\\r\\n    })\\r\\n  );\\r\\n});\\n\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"참고\"), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, \"service worker\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"기업 기술 블로그에서 사용 예시\"), \"\\n\"), React.createElement(_components.p, null, \"https://fe-developers.kakaoent.com/2022/221208-service-worker/\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"개인 블로그 설명\"), \"\\n\"), React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://velog.io/@ouo_yoonk/PWA-Service-worker-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%BA%90%EC%8B%9C#http-cache%EC%99%80-service-workder-cache\"\n  }, \"https://velog.io/@ouo_yoonk/PWA-Service-worker-그리고-캐시#http-cache와-service-workder-cache\")), React.createElement(_components.p, null, \"https://jdh5202.tistory.com/817 (참고하는데 도움 됨)\"), React.createElement(_components.p, null, \"https://shj.rip/bc900e3f-cc71-4a7e-b81d-3ffb8cdf6f37\"), React.createElement(_components.p, null, \"https://blog.arnellebalane.com/offline-web-applications-with-service-workers-29b23b49b305 (예시와 설명이 잘 되어 있음)\"), React.createElement(_components.p, null, \"https://somedaycode.github.io/develop/2021/03/12/cacheStorage/\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"web dev (구글 개발자들의 아티클)\"), \"\\n\"), React.createElement(_components.p, null, \"https://web.dev/i18n/ko/service-worker-caching-and-http-caching/\"), React.createElement(_components.p, null, \"https://developer.chrome.com/docs/workbox/modules/workbox-strategies/#cache-first-cache-falling-back-to-network\"), React.createElement(_components.p, null, \"https://web.dev/offline-cookbook/#serving-suggestions\"), React.createElement(_components.p, null, \"https://web.dev/service-workers-cache-storage/\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"MDN\"), \"\\n\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/ko/docs/Web/API/Service_Worker_API\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/install_event\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/activate_event\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/ko/docs/Web/API/ServiceWorker\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/delete\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문제 해결 참고\"), \"\\n\"), React.createElement(_components.p, null, \"https://stackoverflow.com/questions/47527223/a-bad-http-response-code-404-was-received-when-fetching-the-script\"), React.createElement(_components.p, null, \"https://stackoverflow.com/questions/39136625/service-worker-registration-failed\"), React.createElement(_components.p, null, \"https://stackoverflow.com/questions/66529102/uncaught-in-promise-typeerror-failed-to-execute-cache-on-addall-request\")), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, \"cache\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"MDN\"), \"\\n\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/delete\"), React.createElement(_components.p, null, \"https://developer.mozilla.org/en-US/docs/Web/API/Cache/match\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"web dev\"), \"\\n\"), React.createElement(_components.p, null, \"https://web.dev/cache-api-quick-guide/#cacheaddall\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"개인 블로그\"), \"\\n\"), React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://velog.io/@chltjdrhd777/%EA%B8%B0%EC%97%85%EA%B3%BC%EC%A0%9C-%ED%9A%8C%EA%B3%A0-cache-storage-%EB%B0%8F-%EA%B8%B0%ED%83%80-%EA%B3%A0%EC%83%9D%EB%82%B4%EC%9A%A9\"\n  }, \"https://velog.io/@chltjdrhd777/기업과제-회고-cache-storage-및-기타-고생내용\")), React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://doinge-coding.tistory.com/entry/%EC%9B%B9%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-IndexedDB-Cache-API\"\n  }, \"https://doinge-coding.tistory.com/entry/웹스토리지-IndexedDB-Cache-API\")), React.createElement(_components.p, null, \"https://somedaycode.github.io/develop/2021/03/12/cacheStorage/\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","h2","ol","li","img","h3","ul","blockquote","a","code","pre","_provideComponents","components","React","src","alt","href","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}